install
+- install zlx
   +- zig build-exe zlx Debug native 12 errors
C:\Users\Trevor\.zig\lib\std\os\windows.zig:2194:13: error: unable to evaluate comptime expression
            asm (
            ^~~
C:\Users\Trevor\.zig\lib\std\os\windows.zig:2203:15: note: called at comptime from here
    return teb().ProcessEnvironmentBlock;
           ~~~^~
C:\Users\Trevor\.zig\lib\std\io.zig:35:27: note: called at comptime from here
        return windows.peb().ProcessParameters.hStdError;
               ~~~~~~~~~~~^~
C:\Users\Trevor\.zig\lib\std\io.zig:46:40: note: called at comptime from here
    return .{ .handle = getStdErrHandle() };
                        ~~~~~~~~~~~~~~~^~
src\parser\expr.zig:9:32: note: called at comptime from here
const stderr = std.io.getStdErr().writer();
               ~~~~~~~~~~~~~~~~^~
src\parser\expr.zig:9:41: note: initializer of container-level variable must be comptime-known
const stderr = std.io.getStdErr().writer();
               ~~~~~~~~~~~~~~~~~~~~~~~~~^~
C:\Users\Trevor\.zig\lib\std\os\windows.zig:2194:13: error: unable to evaluate comptime expression
            asm (
            ^~~
C:\Users\Trevor\.zig\lib\std\os\windows.zig:2203:15: note: called at comptime from here
    return teb().ProcessEnvironmentBlock;
           ~~~^~
C:\Users\Trevor\.zig\lib\std\io.zig:35:27: note: called at comptime from here
        return windows.peb().ProcessParameters.hStdError;
               ~~~~~~~~~~~^~
C:\Users\Trevor\.zig\lib\std\io.zig:46:40: note: called at comptime from here
    return .{ .handle = getStdErrHandle() };
                        ~~~~~~~~~~~~~~~^~
src\parser\parser.zig:9:32: note: called at comptime from here
const stderr = std.io.getStdErr().writer();
               ~~~~~~~~~~~~~~~~^~
src\parser\parser.zig:9:41: note: initializer of container-level variable must be comptime-known
const stderr = std.io.getStdErr().writer();
               ~~~~~~~~~~~~~~~~~~~~~~~~~^~
src\parser\expr.zig:17:52: error: operator > not allowed for type '?parser.lookups.BindingPower'
        while (lus.bp_lu.get(p.currentTokenKind()) > bp) {
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~
src\parser\stmt.zig:14:9: error: value of type 'ast.ast.Stmt' ignored
        try stmt_fn(p);
        ^~~~~~~~~~~~~~
src\parser\stmt.zig:14:9: note: all non-void values must be used
src\parser\stmt.zig:14:9: note: to discard the value, assign it to '_'
src\parser\stmt.zig:32:17: error: error union is discarded
    _ = p.expect(.OPEN_CURLY);
        ~~~~~~~~^~~~~~~~~~~~~
src\parser\stmt.zig:32:17: note: consider using 'try', 'catch', or 'if'
src\parser\stmt.zig:126:52: error: error union type '@typeInfo(@typeInfo(@TypeOf(parser.parser.Parser.expect)).@"fn".return_type.?).error_union.error_set!lexer.token.Token' does not support field access
    const function_name = try p.expect(.IDENTIFIER).value;
                              ~~~~~~~~~~~~~~~~~~~~~^~~~~~
src\parser\stmt.zig:126:52: note: consider using 'try', 'catch', or 'if'
src\parser\stmt.zig:165:62: error: error union type '@typeInfo(@typeInfo(@TypeOf(parser.parser.Parser.expect)).@"fn".return_type.?).error_union.error_set!lexer.token.Token' does not support field access
    const import_name: []const u8 = try p.expect(.IDENTIFIER).value;
                                        ~~~~~~~~~~~~~~~~~~~~~^~~~~~
src\parser\stmt.zig:165:62: note: consider using 'try', 'catch', or 'if'
src\parser\stmt.zig:185:61: error: error union type '@typeInfo(@typeInfo(@TypeOf(parser.parser.Parser.expect)).@"fn".return_type.?).error_union.error_set!lexer.token.Token' does not support field access
    const value_name: []const u8 = try p.expect(.IDENTIFIER).value;
                                       ~~~~~~~~~~~~~~~~~~~~~^~~~~~
src\parser\stmt.zig:185:61: note: consider using 'try', 'catch', or 'if'
src\parser\stmt.zig:211:49: error: error union type '@typeInfo(@typeInfo(@TypeOf(parser.parser.Parser.expect)).@"fn".return_type.?).error_union.error_set!lexer.token.Token' does not support field access
    const class_name = try p.expect(.IDENTIFIER).value;
                           ~~~~~~~~~~~~~~~~~~~~~^~~~~~
src\parser\stmt.zig:211:49: note: consider using 'try', 'catch', or 'if'
src\parser\types.zig:26:23: error: error union is discarded
    _ = type_bp_lu.put(kind, .PRIMARY);
        ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~
src\parser\types.zig:26:23: note: consider using 'try', 'catch', or 'if'
src\parser\types.zig:39:34: error: expected type 'ast.ast.Type', found 'ast.ast.SymbolType'
            return ast.SymbolType{
                   ~~~~~~~~~~~~~~^
src\ast\ast.zig:156:24: note: struct declared here
pub const SymbolType = struct {
                       ^~~~~~
src\ast\ast.zig:164:18: note: union declared here
pub const Type = union(enum) {
                 ^~~~~
src\parser\types.zig:38:35: note: function return type declared here
        pub fn afn(p: *Parser) ast.Type {
                               ~~~^~~~~
src\parser\types.zig:49:25: error: error union is discarded
            _ = p.expect(.CLOSE_BRACKET);
                ~~~~~~~~^~~~~~~~~~~~~~~~
src\parser\types.zig:49:25: note: consider using 'try', 'catch', or 'if'
error: the following command failed with 12 compilation errors:
C:\Users\Trevor\.zig\zig.exe build-exe -ODebug --dep regxp -Mroot=C:\dev\zlx\src\main.zig -Mregxp=C:\dev\zlx\libs\zig-regex\src\regex.zig --cache-dir C:\dev\zlx\.zig-cache --global-cache-dir C:\Users\Trevor\AppData\Local\zig --name zlx --zig-lib-dir C:\Users\Trevor\.zig\lib\ --listen=- 
Build Summary: 0/3 steps succeeded; 1 failed
install transitive failure
+- install zlx transitive failure
   +- zig build-exe zlx Debug native 12 errors
error: the following build command failed with exit code 1:
C:\dev\zlx\.zig-cache\o\608c0b494c8f8e7604a35130bc0e2d5d\build.exe C:\Users\Trevor\.zig\zig.exe C:\Users\Trevor\.zig\lib C:\dev\zlx C:\dev\zlx\.zig-cache C:\Users\Trevor\AppData\Local\zig --seed 0xca72603a -Ze1ad6bf17ca9811a
