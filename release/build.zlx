import sys;
import fs;
import path;
import array;
import string;
import time;

import array_list;

const version = "0.4.3";
const target_path = path.join("release", "targets");
const compressed_path = path.join("release", "compressed");

// Fs prep
if fs.exists(target_path) {
    fs.rm(target_path);
}
fs.mkdir(target_path);

if fs.exists(compressed_path) {
    fs.rm(compressed_path);
}
fs.mkdir(compressed_path);

// Targets
const win = ["x86_64", "aarch64", "x86"];

const mac = ["x86_64", "aarch64"];

const lin = [
    "x86_64",
    "arm",
    "aarch64",
    "x86",
    "riscv64",
    "powerpc64le",
    "loongarch64",
    "s390x",
];

const targets = {
    windows: win,
    macos: mac,
    linux: lin,
};

const operating_sys = ["linux", "macos", "windows"];

// Command line args
const root = "zig build";
const release_mode = "--release=safe";
const target_format = "-Dtarget={}-{}";
const prefix = "-p " + target_path;
let commands = new array_list();
let folder_names = new array_list();

for os in operating_sys {
    for target in targets[os] {
        const opt = new array_list();
        const target_formatted = format(target_format, target, os);
        opt.push(root);
        opt.push(release_mode);
        opt.push(target_formatted);
        opt.push(prefix);
        commands.push(opt.items());

        let release_path = path.join(target_path, format("zlx-{}_{}-{}", version, os, target));
        fs.copy("README.md", path.join(release_path, "README.md"));
        fs.copy("CHANGELOG.md", path.join(release_path, "CHANGELOG.md"));
        fs.copy("LICENSE", path.join(release_path, "LICENSE"));
        fs.mkdir(path.join(release_path, "resources"));
        fs.mkdir(path.join(release_path, "doc"));
        fs.copy(path.join("resources", "zlx-logo-v2.png"), path.join(release_path, "resources", "zlx-logo-v2.png"));
        fs.copy(path.join("doc", "zlx-reference.html"), path.join(release_path, "doc", "zlx-reference.html"));
        folder_names.push(release_path);
    }
}
commands = commands.items();
folder_names = folder_names.items();

for command_num in 0..len(commands) {
    // Compile the program and move into the correct output file
    let start_compile = time.millis();
    let out = sys.run(array.join(commands[command_num], " "));
    if out.stderr != "" {
        println("Process errored with:");
        print(out.stderr);
        break;
    }
    let end_compile = time.millis();
    println(format("Compilation {} took {} ms", command_num + 1, end_compile - start_compile));

    const bin = path.join(target_path, "bin");
    let exe_path = "";
    for file in fs.list_all_files(bin) {
        if string.ends_with(file, "zlx") || string.ends_with(file, "zlx.exe") {
            exe_path = file;
        }
    }
    let release_path = folder_names[command_num];
    let release_file = path.join(release_path, path.basename(exe_path));
    fs.copy(exe_path, release_file);
    fs.rm(bin);
}
println();

for compiled, idx in fs.list(target_path) {
    let compiled_name = path.basename(compiled);
    let start_compression = time.millis();
    _ = sys.run(format("tar -cvf {}.tar -C {} .", path.join(compressed_path, compiled_name), path.join(target_path, compiled_name)));
    let end_compression = time.millis();
    println(format("Compression {} took {} ms", idx + 1, end_compression - start_compression));
}
