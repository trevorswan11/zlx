{
  "scopeName": "source.zlx",
  "name": "ZLX",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#builtin_functions" },
    { "include": "#builtin_modules" },
    { "include": "#builtin_structs" },
    { "include": "#operators" },
    { "include": "#numbers" },
    { "include": "#identifiers" },
    { "include": "#strings" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "match": "//.*",
          "name": "comment.line.double-slash"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(let|const|struct|enum|new|import|from|fn|if|else|for|foreach|while|typeof|delete|in|break|continue|return|match)\\b",
          "name": "keyword.control.zlx"
        },
        {
          "match": "\\b(nil|true|false)\\b",
          "name": "constant.language.zlx"
        }
      ]
    },
    "builtin_functions": {
      "patterns": [
        {
          "match": "\\b(print|println|len|ref|range|to_string|to_number|to_bool|format|to_ascii|from_ascii)\\b",
          "name": "support.function.builtin.zlx"
        }
      ]
    },
    "builtin_modules": {
      "patterns": [
        {
          "match": "\\b(array|debug|fs|math|path|random|string|sys|time|csv|json|stat|plot)\\b",
          "name": "support.type.builtin.zlx"
        }
      ]
    },
    "builtin_structs": {
      "patterns": [
        {
          "match": "\\b(adjacency_list|adjacency_matrix|array_list|deque|graph|map|set|linked_list|heap|queue|stack|treap|vector|matrix|sqlite)\\b",
          "name": "support.type.struct.builtin.zlx"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "begin": "\\b(let|const)\\b\\s+",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.zlx" }
          },
          "end": "(?==|;|$)",
          "patterns": [
            {
              "match": "([a-zA-Z_][a-zA-Z0-9_]*)",
              "name": "variable.other.zlx"
            }
          ]
        },
        {
          "match": "\\bfn\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "entity.name.function.zlx" }
          }
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "name": "entity.name.function.call.zlx"
        },
        {
          "match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "variable.member.zlx" }
          }
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "name": "variable.zlx"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(\\+\\+|--|\\+=|-=|\\*=|/=|%=|==|!=|<=|>=|=|\\+|-|\\*|/|%|<|>|\\|\\||&&|\\||&|\\^|!|\\?|:|\\.|\\.\\.|,|;|->)",
          "name": "keyword.operator.zlx"
        },
        {
          "match": "(\\(|\\)|\\{|\\}|\\[|\\])",
          "name": "meta.brace.zlx"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b\\d+(\\.\\d+)?\\b",
          "name": "constant.numeric.zlx"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "```",
          "end": "```",
          "name": "string.quoted.multiline.zlx"
        },
        {
          "begin": "\"",
          "end": "\"",
          "name": "string.quoted.double.zlx"
        }
      ]
    }
  }
}
